1、用注解还是用 xml 配置?
    常用注解:@Insert、@Select、@Update、@Delete、@Param、@Results、 @Result
    在 MyBatis 的工程中，我们有两种配置 SQL 的方式。一种是在 Mapper.xml 中集中 管理，一种是在 Mapper 接口上，用注解方式配置 SQL。很多同学在工作中可能两种方 式都用过。那到底什么时候用 XML 的方式，什么时候用注解的方式呢?
    注解的缺点是 SQL 无法集中管理，复杂的 SQL 很难配置。所以建议在业务复杂的项目中只使用 XML 配置的形式，业务简单的项目中可以使用注解和 XML 混用的形式。

2、Mapper 接口无法注入或 Invalid bound statement (not found)
  我们在使用 MyBatis 的时候可能会遇到 Mapper 接口无法注入，或者 mapper statement id 跟 Mapper 接口方法无法绑定的情况。基于绑定的要求或者说规范，我们 可以从这些地方去检查一下:
  (1)扫描配置，xml 文件和 Mapper 接口有没有被扫描到
  (2)namespace 的值是否和接口全类名一致
  (3)检查对应的 sql 语句 ID 是否存在

3、怎么获取插入的最新自动生成的 ID
    在 MySQL 的插入数据使用自增 ID 这种场景，有的时候我们需要获得最新的自增 ID， 比如获取最新的用户 ID。常见的做法是执行一次查询，max 或者 order by 倒序获取最 大的 ID(低效、存在并发问题)。在 MyBatis 里面还有一种更简单的方式:
    insert 成功之后，mybatis 会将插入的值自动绑定到插入的对象的 Id 属性中，我们 用 getId 就能取到最新的 ID。

4、如何实现模糊查询 LIKE
    (1)字符串拼接
    在 Java 代码中拼接%%(比如 name = "%" + name + "%"; )，直接 LIKE。因为没有预编译，存在 SQL 注入的风险，不推荐使用。
    (2)CONCAT(推荐)
    (3)bind标签

5、什么时候用#{}，什么时候用${}?
    在 Mapper.xml 里面配置传入参数，有两种写法:#{} 、${}。作为 OGNL 表达式，
    都可以实现参数的替换。这两种方式的区别在哪里?什么时候应该用哪一种? 要搞清楚这个问题，我们要先来说一下 PrepareStatement 和 Statement 的区别。
    (1)两个都是接口，PrepareStatement 是继承自 Statement 的;
    (2)Statement 处理静态 SQL，PreparedStatement 主要用于执行带参数的语句;
    (3)PreparedStatement 的 addBatch()方法一次性发送多个查询给数据库;
    (4)PS 相似 SQL 只编译一次(对语句进行了缓存，相当于一个函数),比如语句相同参数不同，可以减少编译次数;
    (5)PS 可以防止 SQL 注入。

    MyBatis 任意语句的默认值:PREPARED

    这两个符号的解析方式是不一样的:
    #会解析为 Prepared Statement 的参数标记符，参数部分用?代替。传入的参数会 经过类型检查和安全检查。
    $只会做字符串替换

    #和$的区别:
    (1)是否能防止 SQL 注入:$方式不会对符号转义，不能防止 SQL 注入
    (2)性能:$方式没有预编译，不会缓存
    结论:
    (1)能用#的地方都用#
    (2)常量的替换，比如排序条件中的字段名称，不用加单引号，可以使用$


6、对象属性是基本类型 int double，数据库返回 null 是报错
    使用包装类型。如 Integer，不要使用基本类型如 int。

7、If test !=null 失效了?
    在实体类中使用包装类型。

8、XML 中怎么使用特殊符号，比如小于 &
  (1)转义< &lt; (大于可以直接写)
  (2)使用<![CDATA[ ]]>——当 XML 遇到这种格式就会把[]里面的内容原样输出，不 进行解析
