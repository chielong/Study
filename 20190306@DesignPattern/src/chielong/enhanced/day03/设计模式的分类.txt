@Author:chielong

=====================================
Q:总结设计模式分类中创建型、结构型、行为型之间根本区别。
    用我自己的话总结就是：
    创建型：关键词："产品"。核心竞争力：生成了需要或者定制的产品。
    结构型：关键词："桥梁"。核心竞争力：联系至少两者（类）的设计。
    行为型：关键词："干活"。核心竞争力：针对一件东西干活。注意，这里的东西指的是入参。

    这里用以上总结自圆其说。
    1.原型模式。我们需要的一个产品。所以是创建型。
    2.装饰器模式。虽然我们需要的也是一个产品。但是这个产品是"内聚"的，这是一个复杂的产品（层层装饰）。这里更加强调多个装饰者之间的修饰关系。所以是"结构型"。
    可能有人要抬杠，说原型模式如果需要的产品也是"复杂产品"（比如一个class Person{Hair hair...}）呢？我认为这个算做组合模式。组合模式也是结构型的。
    PS:组合模式则是有确定性的(要么有，要么没有)。装饰者没有确定性。
    3.适配器模式。以手机充电线为例，大头-usb接口(公头，木头)-typeC/ios/android接口。没有生成新产品。更关键的是沟通了手机充电接口。所以是"结构型"。
    4.策略模式。根据一件工作，找到对应的人干。这个过程中针对的东西的是"工作"，干的活是"找"。

    不吐不快的一件事：
    设计模式根本还是解耦。解耦的根本还是要代码复用。
    所以当我们用设计模式，最重要的是想，如何能少写代码却可以完成工作。
    和组里老大聊过这个问题，老大问我，"spring的工作量和你的业务代码那个多？"
    的确，我业务远远不及spring的宏大。但是spring却帮助了无数的程序员少写了代码。
    虽然"看起来""目前"是写了很多的代码，但是长期来看，却是极大的减少了"总"工作量。

