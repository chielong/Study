@Author:chielong

=====================================
Q:通过绑定方法来实现观察者模式，会有什么隐患。
    不好意思！今天没看懂题！"绑定"这个词太文艺，糙汉我不懂。
    以下说说我的理解(不懂归不懂，态度还是要有的。)

    1.观察者模式，我觉得叫发布-订阅模式更好。
    首先由两个接口IPublish(包括方法：订阅)和ISubscribe(包括方法：接受)。
    出版商需要实现接口IPublish。读者们需要实现ISubscribe。
    出版商维护读者们的消息。而读者需要...似乎不是必须知道出版商——他只需要订阅就好(比如某人订了报纸，出门就忘)。但是我们会设计读者知道相关消息。(万一记性好呢？)
    读者只需要通过出版社的订阅接口，"注册"进出版商维护的集合中。而出版商的发布操作，直接把东西交给订阅者的接受接口就好。
    这应该算动态绑定。

    2.隐患？
    我能想到的会发生问题的状况就是在出版社发布消息的时候，此时需要调用所有订阅者的接受接口。这时如果一个发生重大问题，就会阻塞后续操作。
    如果用多线程处理呢？如：
    public publishMsg() {
        for(ISubscribe subscribe: this.SubsrcibeList) {
            new Thread(new Runnable() {
                @override
                public void run() {
                    subscribe.recevieMsg();
                }
            }).start();
        }
    }
    这样做的问题有转移到了多线程问题上。但可以做到一个被阻塞不影响其他问题。(可以加一个熔断...但似乎更加复杂了)
    参考实际情况，出版社-信差-订阅者
    那么这个多线程/传递的功能应该交给信差去做。而订阅者应该简单的暴露出"收件地址"，其他的都不进行复杂处理才可以。
    回到简单的发布-订阅模式中，至于其他的问题，关于出版社内部的不恰当操作导致其维护的订阅者丢失的问题不再赘述。
