@Author:chielong

=====================================
1.Java中，为什么不允许从静态方法中访问非静态变量。
    思路：为什么访问不到，为什么设计者不进行访问设计

    注：以下回答是在"静态方法"和"非静态变量"都属于同一个类的前提下。
    1)（见图1）
    1>从jvm设计层面上说：
    任何一个对象实例都包括两部分内容：他的实例数据和他的类的数据。
    一个静态方法属于类数据。
    由于类数据中缺少对于对象实例的指针，所以访问不到相应的实例数据(非静态变量)。
    2>从jvm实现上说：
    对于实例方法，jvm会自动编入一个名为this的参数，这个参数就是指向本实例的指针。所以可以用this.的方式获得实例数据。
    而static修饰的方法，没有这个参数，所以static中不能用this关键字。
    2)为什么这么设计？
    类是一个抽象，而实例是一个具体的东西。这句话的意思是：chielong是人，而人不是chielong。
    所以一个实例有其对应类的相关属性，并且有的属性都充满自己的"特性"。
    假设能访问到，这么访问的是哪个具体的实例呢？如果能访问，就不能厚此薄彼，所以干脆都访问不到。
    其实静态方法可以访问非静态变量，比如，参数传入进来一个本类对象实例，比如：
    (只是为了举个例子，请不必诸多眷恋)
    public class Human {
        public boolean alive;

        public Human() {
            alive = true;
        }

        public static void kill(Human poorMan) {
            poorMan.alive = flase;
        }
    }

2.软件架构中的上层应用是指那些层，客户端属于上层应用吗？
    不是。
    上层指的是"相对上层"。
    用网络的知识解释，以服务端到客户端的一次响应为例，需要：
    服务端应用层->服务端表示层->服务端会话层->......->客户端会话层->客户端表示层->客户端应用层
    那么客户端的应用层相对于表示层就是上层的应用。
    上层相对于下层，更面向具体业务。由于上层的更加专业，更加特定，所以可变性也更大。
    因此，上层不是一些具体的层，而是与具体业务相关的东东，包括但不限于ui，Spring的ClasspathXmlApplicationContext...
