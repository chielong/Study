——A famous aphorism of David Wheeler goes:
"All problems in computer science can be solved by another level of indirection"
(the "fundamental theorem of software engineering").

这句话来自维基百科的Indirection词条。
翻译成汉语就是：
大卫惠勒的一句著名格言是：“计算机科学中的所有问题都可以通过另一个间接层次来解决”（“软件工程的基本定理”）。
我把这个"间接层次"理解为中间件（并不是说分布式中的中间件，而是更加广义的）

我认为spring就是一个中间件。
既然说他是中间件，那么他是什么的中间件呢？
他是程序员和对象之间的中间件！（不是boyfriend/girlfriend而是object。）


通过spring，实现了程序员和对象之间的解耦。
spring将管理对象的重担接下，
而程序员只需要完成自己的业务就好了。

springframework用来干什么？
一句话：管理Beans。
beans才是spring学习中真正需要关注的问题。
由此才展开了SpringIOC、DI的问题。

请接着我的思路：
既然spring用来管理bean，那么bean从哪里来呢？
可以是xml，可以是注解，可以是...更多复杂的东西，
只要将beans找到，然后解析出来交给spring，就完成了所谓的"ioc"。
可能谈到"ioc初始化"，了解spring的都会说"定位、加载、注册"
但我觉得这并不确切。
在这个过程中，spring仅仅完成了对于beans的"认知"。
比如：一个大象放入冰箱需要几步？
这种问题对于spring是不存在的。
因为spring仅仅是"认知"了大象这种东西。
注意：一个大象实例和大象这个概念是不同的。
而spring只是接受了大象这个概念。
他根据程序员的描述信息，
    知道了一种生物生活在哪里，
    知道了这种生物长什么样子，
    然后他就在自己的小本本上记下，这个东西叫做"大象"
——我觉得，也就这样了，还能怎么样呢？
——你看，到这里根本没有具体的大象，只有"大象"的概念。
——这就是我眼中的ioc
(PS:我觉得"加载"这个名字非常不好，"加载并解析"更好。)

既然spring用来管理bean，那么bean怎么到程序员手里呢？
getBean();
当spring知道了"大象"
当程序员向spring所要一头大象
spring就开始出手了
spring按照自己的对于"大象"这种东西的认知，
生成他的鼻子，生成大耳朵...
反正他最后3D打印了一头活生生的大象。对，我的语言就是这么匮乏。
然后把这个东西交给程序员
那么如果程序员再来要一遍呢？
spring当然不会再造一边，他把这个东西保存住了。（注意这里）
如果"大象"肚子里面还有某灌木呢？
没关系，当spring认知了这种"灌木"，他会打印一个灌木，塞进大象的肚子。
如果程序员疯了，他觉得灌木的肚子里面还有个大象呢？
spring会去找的已经被保存的大象，将这个大象塞进灌木中。
(这里还牵扯到spring对于初始化bean的标记等操作...不展开说)
——这就是我眼中的DI

既然spring用来管理bean，那么怎么做到了mvc呢？
这还是从spring中获得bean的问题
——通过某个条件找到某个方法
——通过一个描述找到大象的鼻子
但是这里有个与众不同的问题：
——mvc要的是实际的东西
——通过描述找到大象的鼻子，那么真的需要的一个"鼻子"
所以需要找到某个object
所以需要找到某个实际的大象
但是spring已经保存住了这个实际的大象，所以他可以找到这个鼻子。
