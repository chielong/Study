1.升级JDK8，J2EE7
2.响应式编程
3.全面支持注解编程
4.支持函数式编程
5.全面支持REST风格配置
6.对HTTP2.0全面支持
7.Kotlin和SpringWebFlux
8.可以直接使用Lambda表达式来注册Bean
9.Spring Web MVC全面最新的Servlet API
10.JUnit5，直接支持并发测试
11.丢弃hibernate3,4。只支持hibernate5。portlet,velocity,xmlBeans,jdo,guava终止支持
12.Spring核心容器做了一些更新,@Nullable

Spring WebFlux

================================
1.使用spring框架能给我们带来哪些好处?
    简化开发:
    DI:依赖关系一目了然
    IOC:管理好系统中的Bean
    万能胶:兼容成熟的框架hibernate、mybatis、quartz、shiro
    模块化设计:即插即用，按需分配
    自带测试组件:JUnit
    WebMVC:过度设计嫌疑，完美分离了Servlet和普通Bean
    生命式事务:自然将非功能性代码和功能性代码分离，提出了事务管理提前声明

2.BeanFactory和ApplicationContext有什么区别？
    ApplicationContext是BeanFactory子接口
    getBean()
    A.ioc容器中bean监控，生命周期
    PostProcessor

    ApplicationEvent
    ContextRefreshedEvent
    ContextStartedEvent
    ContextStoppedEvent
    ContextClosedEvent
    RequesHandleredEvent

    B.支持国际化i18n
    C.拓展了统一资源文件读取方式URL
    可以是一个本地URL，也可以是一个网络URL
    ClassPathXmlApplicationContext
    FileSystemXmlApplicationContext
    XmlWebApplicationContext

    AnnotationCOnfigApplicationContext

3.请解释SpringBean生命周期
    InitializingBean和DisposableBean用来回调
    Aware接口
    init()、destory()
    @PostContruct 和 @PreDestory注解方式

4.SpringBean各种作用域之间的区别?
    总共五个范围，对象什么时候创建，什么时候销毁
    顶层:
    A.[1岁]什么时候用，什么时候出生，用完就死了(prototype)
    B.[100岁]我从容器启动就从石头缝里蹦出来，直到Spring的世界末日才灭亡(singleton)
    Web层:
    3.[10岁]request
    4.[20岁]session
    5.[80岁]global-session

5.SpringBean线程安全吗?
    SpringBean由ioc容器创建，创建的对象是自己写的。
    BeanDefinition
    BeanWarpper : instance Class.newInstance(); new Object();
    Map<String , BeanWarpper> 顶多就是做了一次代理，用一个新的类替代原来的类
    跟我们写的代码有关系，跟Spring无关。

6.Spring中用到了哪些设计模式?

7.Spring是怎么处理循环依赖的?
    用缓存机制来解决循环依赖的问题。

8.在service层中如何获取到applicationContext?
    实现ApplicationContextAware接口

9.SpringTX怎么实现?
    1.非功能性代码拆分出来，放到一个TransactionManager里面统一管理。
    本身就是一个切面，connection
    2.TransactionManager切面，织入到PointCut中

10.SpringAop中对已经被代理过的对象是怎么处理的?
    原生对象：没有做任何处理
    被封装到了BeanWrapper里面，存的是代理对象的引用。
